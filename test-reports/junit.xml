<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="11" skipped="0" tests="70" time="7.208" timestamp="2021-11-09T14:23:02.284090" hostname="cgdm-dine"><testcase classname="tests.test_core" name="test_set_zoo_biomass" time="0.003" /><testcase classname="tests.test_core" name="test_set_zoo_mortality" time="0.002" /><testcase classname="tests.test_core" name="test_set_zoo_mortality_wrong_shape" time="0.001" /><testcase classname="tests.test_core" name="test_set_fish_biomass" time="0.002" /><testcase classname="tests.test_core" name="test_set_benthic_biomass" time="0.004" /><testcase classname="tests.test_core" name="test_set_biomass_wrong_shape" time="0.001" /><testcase classname="tests.test_core" name="test_gcm_state_update" time="0.003" /><testcase classname="tests.test_driver" name="test_idealized_forcing" time="0.004" /><testcase classname="tests.test_driver" name="test_get_gcm_forcing_t" time="0.001" /><testcase classname="tests.test_fish_instance" name="test_fish_init" time="0.003" /><testcase classname="tests.test_fish_instance" name="test_fish_init_duplicate_fish" time="0.088" /><testcase classname="tests.test_fish_instance" name="test_fish_bad_harvest_selectivity" time="0.087" /><testcase classname="tests.test_fish_instance" name="test_fish_bad_energy_frac_somatic_growth" time="0.088" /><testcase classname="tests.test_fish_instance" name="test_fish_init_uncoupled" time="0.089" /><testcase classname="tests.test_fish_instance" name="test_fish_apply_pref" time="0.001"><failure message="KeyError: 'pelagic_demersal_coupling_apply_pref_types'">def test_fish_apply_pref():
&gt;       pdc_apply_pref_type_keys = settings_dict_def['model_settings'][
            'pelagic_demersal_coupling_apply_pref_types'
        ]
E       KeyError: 'pelagic_demersal_coupling_apply_pref_types'

tests/test_fish_instance.py:122: KeyError</failure></testcase><testcase classname="tests.test_fish_instance" name="test_is_demersal" time="0.001"><failure message="KeyError: 'demersal_functional_types'">def test_is_demersal():
        for fish in F.fish:
&gt;           is_demersal = fish.functional_type in model_settings['demersal_functional_types']
E           KeyError: 'demersal_functional_types'

tests/test_fish_instance.py:132: KeyError</failure></testcase><testcase classname="tests.test_food_web" name="test_food_web_init_1" time="0.009" /><testcase classname="tests.test_food_web" name="test_food_web_init_2" time="0.002" /><testcase classname="tests.test_food_web" name="test_food_web_init_3" time="0.019" /><testcase classname="tests.test_food_web" name="test_food_web_init_data" time="0.116" /><testcase classname="tests.test_food_web" name="test_missing_fish" time="0.096" /><testcase classname="tests.test_food_web" name="test_pred_ndx_prey_filt" time="0.002" /><testcase classname="tests.test_food_web" name="test_duplicated_link_fails" time="0.096" /><testcase classname="tests.test_food_web" name="test_get_prey_biomass" time="0.022"><failure message="KeyError: 'pelagic_functional_types'">def test_get_prey_biomass():
        """verify the `get_prey_biomass` method"""

        # generate random biomass data
        data = xr.full_like(F.biomass, fill_value=0.0)
        data.data[:, :] = np.random.rand(*data.shape)

        # set the feisty_instance biomass array to these random values
        # save the old values
        zoo_data_prior = F.biomass.isel(group=F.ndx_zoo).data
        fish_data_prior = F.biomass.isel(group=F.ndx_fish).data
        benthic_data_prior = F.biomass.isel(group=F.ndx_benthic_prey).data

        F.set_zoo_biomass(data.isel(group=F.ndx_zoo))
        F.set_fish_biomass(data.isel(group=F.ndx_fish))
        F.set_benthic_prey_biomass(data.isel(group=F.ndx_benthic_prey))

        # ensure that the prey biomass returned matchs that input
        for pred, prey in zip(F.food_web.link_predator, F.food_web.link_prey):
            prey_list_check = all_prey[pred]

            da = F.food_web.get_prey_biomass(F.biomass, pred)
            check_value = data.sel(group=prey_list_check).sum('group')
            assert (check_value == da).all()

            # ensure that if *all* functional types are passed in, that the sum is equivalent
            da = F.food_web.get_prey_biomass(
                F.biomass,
                pred,
                prey_functional_type=list(feisty.fish_mod.functional_types.values()),
            )
            assert (check_value == da).all()

            da = F.food_web.get_prey_biomass(F.biomass, pred, apply_preference=True)
            check_value = (
                data.sel(group=prey_list_check) * xr.DataArray(preference[pred], dims=('group'))
            ).sum('group')
            assert (check_value == da).all()

            # ensure that this works for a restricted functional type
            for prey_functional_type in feisty.fish_mod.functional_types.values():

                prey_list_check_filt = [
                    p
                    for p in prey_list_check
                    if fish_mod.functional_types[fish_func_type[p]] == prey_functional_type
                ]
                da = F.food_web.get_prey_biomass(
                    F.biomass,
                    pred,
                    prey_functional_type=set([prey_functional_type]),
                )
                assert (data.sel(group=prey_list_check_filt).sum('group') == da).all()

            # check that pelagic functional type sums work
&gt;           prey_functional_type_keys = model_settings['pelagic_functional_types']
E           KeyError: 'pelagic_functional_types'

tests/test_food_web.py:302: KeyError</failure></testcase><testcase classname="tests.test_food_web" name="test_get_prey_biomass_dne" time="0.001" /><testcase classname="tests.test_food_web" name="test_get_consumption_bad_args" time="0.001" /><testcase classname="tests.test_food_web" name="test_get_consumption_none_existent_predprey" time="0.001" /><testcase classname="tests.test_food_web" name="test_compute_consumption_zero_preference" time="0.091" /><testcase classname="tests.test_food_web" name="test_get_consumption" time="0.128" /><testcase classname="tests.test_food_web" name="test_compute_feeding_1" time="0.197" /><testcase classname="tests.test_init" name="test_reproduction_routing" time="0.004" /><testcase classname="tests.test_init" name="test_reproduction_routing_bad_is_larval" time="0.125" /><testcase classname="tests.test_init" name="test_domain_values" time="0.001" /><testcase classname="tests.test_init" name="test_domain_bad_depth_of_seafloor" time="0.047" /><testcase classname="tests.test_init" name="test_fish_mod_init" time="0.001"><failure message="AttributeError: module 'feisty.fish_mod' has no attribute '_PI_be_cutoff'">def test_fish_mod_init():
        """ensure all fish_mod module vars are initialized"""

        # make sure module variables have been initialized
        assert fish_mod._size_class_masses
        assert fish_mod._size_class_bnds_ratio
        assert fish_mod.functional_types
        assert fish_mod.mortality_types

        # check some 1:1 values
&gt;       assert fish_mod._PI_be_cutoff == settings_dict_def['model_settings']['PI_be_cutoff']
E       AttributeError: module 'feisty.fish_mod' has no attribute '_PI_be_cutoff'

tests/test_init.py:105: AttributeError</failure></testcase><testcase classname="tests.test_init" name="test_fish_mod_size_class_bounds" time="0.001" /><testcase classname="tests.test_init" name="test_func_type_init" time="0.001"><failure message="KeyError: 'functional_type_names'">def test_func_type_init():
        import feisty.fish_mod as fish_mod

&gt;       func_types_expected = settings_dict_def['model_settings']['functional_type_names']
E       KeyError: 'functional_type_names'

tests/test_init.py:132: KeyError</failure></testcase><testcase classname="tests.test_init" name="test_bad_func_type_fails" time="0.091" /><testcase classname="tests.test_init" name="test_bad_mortality_type_fails" time="0.090" /><testcase classname="tests.test_init" name="test_bad_pelagic_demersal_coupling_types_fails" time="0.044"><failure message="KeyError: 'pelagic_demersal_coupling_types'">def test_bad_pelagic_demersal_coupling_types_fails():
        """init should fail if there is an unknown pelagic_demersal_coupling_types"""
        settings_dict_def_bad = feisty.settings.get_defaults()
&gt;       settings_dict_def_bad['model_settings']['pelagic_demersal_coupling_types'].append('UnkownType')
E       KeyError: 'pelagic_demersal_coupling_types'

tests/test_init.py:171: KeyError</failure></testcase><testcase classname="tests.test_init" name="test_bad_pelagic_functional_types_fails" time="0.045"><failure message="KeyError: 'pelagic_functional_types'">def test_bad_pelagic_functional_types_fails():
        """init should fail if there is an unknown pelagic_functional_types"""
        settings_dict_def_bad = feisty.settings.get_defaults()
&gt;       settings_dict_def_bad['model_settings']['pelagic_functional_types'].append('UnkownType')
E       KeyError: 'pelagic_functional_types'

tests/test_init.py:183: KeyError</failure></testcase><testcase classname="tests.test_init" name="test_bad_functional_types_apply_pref" time="0.086"><failure message="TypeError: init_module_variables() got an unexpected keyword argument 'pelagic_demersal_coupling_types'">def test_bad_functional_types_apply_pref():
        """init should fail if type is in apply_preference but not in pelagic_demersal_coupling_types"""
        settings_dict_def_bad = feisty.settings.get_defaults()

        settings_dict_def_bad['model_settings']['pelagic_demersal_coupling_types'] = [
            'demersal',
            'piscivore',
        ]

        settings_dict_def_bad['model_settings']['pelagic_demersal_coupling_apply_pref_types'] = [
            'forage',
            'demersal',
        ]
        with pytest.raises(AssertionError):
&gt;           feisty.feisty_instance_type(
                domain_dict=domain_dict,
                settings_dict=settings_dict_def_bad,
                fish_ic_data=fish_ic_data,
            )

tests/test_init.py:206:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
feisty/core.py:30: in __init__
    self._init_model_settings(self.settings_dict['model_settings'])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;feisty.core.feisty_instance_type object at 0x15ea359d0&gt;
model_settings = {'benthic_pelagic_depth_cutoff': 200.0, 'demersal_functional_type_keys': ['demersal', 'benthic_prey'], 'functional_typ...forage', 'piscivore', 'demersal', 'benthic_prey'], 'pelagic_demersal_coupling_apply_pref_type_keys': ['demersal'], ...}

    def _init_model_settings(self, model_settings):
        """initialize model settings"""
&gt;       fish_mod.init_module_variables(**model_settings)
E       TypeError: init_module_variables() got an unexpected keyword argument 'pelagic_demersal_coupling_types'

feisty/core.py:53: TypeError</failure></testcase><testcase classname="tests.test_init" name="test_bad_demersal_functional_types_fails" time="0.044"><failure message="KeyError: 'demersal_functional_types'">def test_bad_demersal_functional_types_fails():
        """init should fail if there is an unknown demersal_functional_types"""
        settings_dict_def_bad = feisty.settings.get_defaults()
&gt;       settings_dict_def_bad['model_settings']['demersal_functional_types'].append('UnkownType')
E       KeyError: 'demersal_functional_types'

tests/test_init.py:216: KeyError</failure></testcase><testcase classname="tests.test_init" name="test_bad_size_class_fail" time="0.086" /><testcase classname="tests.test_init" name="test_duplicated_pelagic_demersal_types" time="0.048"><failure message="KeyError: 'pelagic_functional_types'">def test_duplicated_pelagic_demersal_types():
        settings_dict_def_bad = feisty.settings.get_defaults()
        combined_list = (
&gt;           settings_dict_def_bad['model_settings']['pelagic_functional_types']
            + settings_dict_def_bad['model_settings']['demersal_functional_types']
        )
E       KeyError: 'pelagic_functional_types'

tests/test_init.py:240: KeyError</failure></testcase><testcase classname="tests.test_init" name="test_zoo_init" time="0.001" /><testcase classname="tests.test_init" name="test_zoo_mortality_not_offline" time="0.188" /><testcase classname="tests.test_init" name="test_biomass_init" time="0.005" /><testcase classname="tests.test_init" name="test_biomass_init_values" time="0.001" /><testcase classname="tests.test_init" name="test_biomass_bad_shape_benthic_prey" time="0.052" /><testcase classname="tests.test_init" name="test_biomass_bad_shape_fish" time="0.051" /><testcase classname="tests.test_init" name="test_gcm_state" time="0.001" /><testcase classname="tests.test_init" name="test_fishing" time="0.001" /><testcase classname="tests.test_init" name="test_init_tendency_arrays" time="0.002" /><testcase classname="tests.test_process" name="test_t_weighted_mean_temp[10.0-1.0-1.0-10.0]" time="0.002" /><testcase classname="tests.test_process" name="test_t_weighted_mean_temp[10.0-1.0-0.5-5.5]" time="0.002" /><testcase classname="tests.test_process" name="test_t_weighted_mean_temp[10.0-1.0-0.0-1.0]" time="0.002" /><testcase classname="tests.test_process" name="test_t_frac_pelagic" time="0.012"><failure message="KeyError: 'pelagic_functional_types'">def test_t_frac_pelagic():
        # set the feisty_instance biomass array to these random values
        zoo_data_prior = F.biomass.isel(group=F.ndx_zoo).data
        fish_data_prior = F.biomass.isel(group=F.ndx_fish).data
        benthic_data_prior = F.biomass.isel(group=F.ndx_benthic_prey).data

        # generate random biomass data
        data = xr.full_like(F.biomass, fill_value=0.0)
        data.data[:, :] = np.random.rand(*data.shape)
        F.set_zoo_biomass(data.isel(group=F.ndx_zoo))
        F.set_fish_biomass(data.isel(group=F.ndx_fish))
        F.set_benthic_prey_biomass(data.isel(group=F.ndx_benthic_prey))

        F._compute_t_frac_pelagic()

&gt;       pelagic_functional_types = model_settings['pelagic_functional_types']
E       KeyError: 'pelagic_functional_types'

tests/test_process.py:76: KeyError</failure></testcase><testcase classname="tests.test_process" name="test_update_benthic_prey" time="0.005" /><testcase classname="tests.test_process" name="test_compute_metabolism" time="0.045" /><testcase classname="tests.test_process" name="test_compute_ingestion" time="0.025" /><testcase classname="tests.test_process" name="test_compute_predation" time="0.045" /><testcase classname="tests.test_process" name="test_compute_mortality" time="1.565" /><testcase classname="tests.test_process" name="test_compute_nu" time="0.011" /><testcase classname="tests.test_process" name="test_compute_gamma" time="0.065" /><testcase classname="tests.test_process" name="test_compute_reproduction" time="0.010" /><testcase classname="tests.test_process" name="test_compute_recruitment" time="0.011" /><testcase classname="tests.test_process" name="test_compute_total_tendency" time="0.051" /><testcase classname="tests.test_process" name="test_compute_fish_catch" time="0.005" /><testcase classname="tests.test_process" name="test_compute_tendencies" time="0.306" /></testsuite></testsuites>
